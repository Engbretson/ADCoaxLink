/* ./Adimec_Q12A180CXP_1_1_3 */ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Standard"); 
status = setIntegerParam(COAXLINK_Remote_Standard, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Revision"); 
status = setIntegerParam(COAXLINK_Remote_Revision, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("XmlManifestSize"); 
status = setIntegerParam(COAXLINK_Remote_XmlManifestSize, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("XmlManifestSelector"); 
status = setIntegerParam(COAXLINK_Remote_XmlManifestSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("XmlVersion"); 
status = setIntegerParam(COAXLINK_Remote_XmlVersion, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("XmlSchemeVersion"); 
status = setIntegerParam(COAXLINK_Remote_XmlSchemeVersion, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("XmlUrlAddress"); 
status = setIntegerParam(COAXLINK_Remote_XmlUrlAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Iidc2Address"); 
status = setIntegerParam(COAXLINK_Remote_Iidc2Address, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ConnectionReset"); 
status = setIntegerParam(COAXLINK_Remote_ConnectionReset, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DeviceConnectionID"); 
status = setIntegerParam(COAXLINK_Remote_DeviceConnectionID, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("MasterHostConnectionID"); 
status = setIntegerParam(COAXLINK_Remote_MasterHostConnectionID, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ControlPacketSizeMax"); 
status = setIntegerParam(COAXLINK_Remote_ControlPacketSizeMax, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("StreamPacketSizeMax"); 
status = setIntegerParam(COAXLINK_Remote_StreamPacketSizeMax, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ConnectionConfig"); 
status = setIntegerParam(COAXLINK_Remote_ConnectionConfig, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ConnectionConfigDefault"); 
status = setIntegerParam(COAXLINK_Remote_ConnectionConfigDefault, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestMode"); 
status = setIntegerParam(COAXLINK_Remote_TestMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestErrorCountSelector"); 
status = setIntegerParam(COAXLINK_Remote_TestErrorCountSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestErrorCount"); 
status = setIntegerParam(COAXLINK_Remote_TestErrorCount, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestPacketCountTx"); 
status = setIntegerParam(COAXLINK_Remote_TestPacketCountTx, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestPacketCountRx"); 
status = setIntegerParam(COAXLINK_Remote_TestPacketCountRx, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ElectricalCompliancyTest"); 
status = setIntegerParam(COAXLINK_Remote_ElectricalCompliancyTest, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WidthAddress"); 
status = setIntegerParam(COAXLINK_Remote_WidthAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("HeightAddress"); 
status = setIntegerParam(COAXLINK_Remote_HeightAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionModeAddress"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionModeAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionStartAddress"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionStartAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionStopAddress"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionStopAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("PixelFormatAddress"); 
status = setIntegerParam(COAXLINK_Remote_PixelFormatAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DeviceTapGeometryAddress"); 
status = setIntegerParam(COAXLINK_Remote_DeviceTapGeometryAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Image1StreamIDAddress"); 
status = setIntegerParam(COAXLINK_Remote_Image1StreamIDAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("HsUpconnection"); 
status = setIntegerParam(COAXLINK_Remote_HsUpconnection, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceVendorName"); 
status = setStringParam(COAXLINK_Remote_DeviceVendorName, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceModelName"); 
status = setStringParam(COAXLINK_Remote_DeviceModelName, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceManufacturerInfo"); 
status = setStringParam(COAXLINK_Remote_DeviceManufacturerInfo, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceVersion"); 
status = setStringParam(COAXLINK_Remote_DeviceVersion, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceFirmwareVersion"); 
status = setStringParam(COAXLINK_Remote_DeviceFirmwareVersion, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceSerialNumber"); 
status = setStringParam(COAXLINK_Remote_DeviceSerialNumber, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("DeviceUserID"); 
status = setStringParam(COAXLINK_Remote_DeviceUserID, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DeviceIndicatorMode"); 
status = setIntegerParam(COAXLINK_Remote_DeviceIndicatorMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BuiltInTest"); 
status = setIntegerParam(COAXLINK_Remote_BuiltInTest, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorTemperature"); 
status = setIntegerParam(COAXLINK_Remote_SensorTemperature, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Width"); 
status = setIntegerParam(COAXLINK_Remote_Width, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Height"); 
status = setIntegerParam(COAXLINK_Remote_Height, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorWidth"); 
status = setIntegerParam(COAXLINK_Remote_SensorWidth, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorHeight"); 
status = setIntegerParam(COAXLINK_Remote_SensorHeight, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WidthMax"); 
status = setIntegerParam(COAXLINK_Remote_WidthMax, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("HeightMax"); 
status = setIntegerParam(COAXLINK_Remote_HeightMax, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("OffsetX"); 
status = setIntegerParam(COAXLINK_Remote_OffsetX, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("OffsetY"); 
status = setIntegerParam(COAXLINK_Remote_OffsetY, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ReverseX"); 
status = setIntegerParam(COAXLINK_Remote_ReverseX, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ReverseY"); 
status = setIntegerParam(COAXLINK_Remote_ReverseY, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("PixelFormat"); 
status = setIntegerParam(COAXLINK_Remote_PixelFormat, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestImageSelector"); 
status = setIntegerParam(COAXLINK_Remote_TestImageSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TestImageVideoLevel"); 
status = setIntegerParam(COAXLINK_Remote_TestImageVideoLevel, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DeviceTapGeometry"); 
status = setIntegerParam(COAXLINK_Remote_DeviceTapGeometry, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("Image1StreamID"); 
status = setIntegerParam(COAXLINK_Remote_Image1StreamID, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("CrosshairOverlay"); 
status = setIntegerParam(COAXLINK_Remote_CrosshairOverlay, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionMode"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionMode, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionStart"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionStart, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionStop"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionStop, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("AcquisitionFrameRate"); 
status = setDoubleParam(COAXLINK_Remote_AcquisitionFrameRate, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("AcquisitionFramePeriod"); 
status = setDoubleParam(COAXLINK_Remote_AcquisitionFramePeriod, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionFramePeriodRaw"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionFramePeriodRaw, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AcquisitionMaxFrameRate"); 
status = setIntegerParam(COAXLINK_Remote_AcquisitionMaxFrameRate, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TriggerSource"); 
status = setIntegerParam(COAXLINK_Remote_TriggerSource, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("TriggerActivation"); 
status = setIntegerParam(COAXLINK_Remote_TriggerActivation, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ExposureMode"); 
status = setIntegerParam(COAXLINK_Remote_ExposureMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("ExposureTime"); 
status = setDoubleParam(COAXLINK_Remote_ExposureTime, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ExposureTimeRaw"); 
status = setIntegerParam(COAXLINK_Remote_ExposureTimeRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("InterfaceUtilization"); 
status = setIntegerParam(COAXLINK_Remote_InterfaceUtilization, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FlashStrobeMode"); 
status = setIntegerParam(COAXLINK_Remote_FlashStrobeMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("FlashStrobeDuration"); 
status = setDoubleParam(COAXLINK_Remote_FlashStrobeDuration, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FlashStrobeDurationRaw"); 
status = setIntegerParam(COAXLINK_Remote_FlashStrobeDurationRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("FlashStrobeDelay"); 
status = setDoubleParam(COAXLINK_Remote_FlashStrobeDelay, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FlashStrobeDelayRaw"); 
status = setIntegerParam(COAXLINK_Remote_FlashStrobeDelayRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FlashStrobeActiveState"); 
status = setIntegerParam(COAXLINK_Remote_FlashStrobeActiveState, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("HDR_Mode"); 
status = setIntegerParam(COAXLINK_Remote_HDR_Mode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SecondExposureTimeRaw"); 
status = setIntegerParam(COAXLINK_Remote_SecondExposureTimeRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("SecondExposureTime"); 
status = setDoubleParam(COAXLINK_Remote_SecondExposureTime, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("MultiSlopeNodeSelector"); 
status = setIntegerParam(COAXLINK_Remote_MultiSlopeNodeSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("MultiSlopeLevel"); 
status = setIntegerParam(COAXLINK_Remote_MultiSlopeLevel, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("MultiSlopeTime"); 
status = setIntegerParam(COAXLINK_Remote_MultiSlopeTime, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("GainSelector"); 
status = setIntegerParam(COAXLINK_Remote_GainSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("Gain"); 
status = setDoubleParam(COAXLINK_Remote_Gain, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("GainRaw"); 
status = setIntegerParam(COAXLINK_Remote_GainRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemDouble = grabber.getFloat<Euresys::RemoteModule>("BlackLevel"); 
status = setDoubleParam(COAXLINK_Remote_BlackLevel, systemDouble); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BlackLevelRaw"); 
status = setIntegerParam(COAXLINK_Remote_BlackLevelRaw, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceWidth"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceWidth, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceHeight"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceHeight, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceOffsetX"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceOffsetX, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceOffsetY"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceOffsetY, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceCalibrate"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceCalibrate, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("WhiteBalanceStatus"); 
status = setIntegerParam(COAXLINK_Remote_WhiteBalanceStatus, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorBitDepth"); 
status = setIntegerParam(COAXLINK_Remote_SensorBitDepth, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ProgrammableGainAmplifier"); 
status = setIntegerParam(COAXLINK_Remote_ProgrammableGainAmplifier, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemString = grabber.getString<Euresys::RemoteModule>("UserMode"); 
status = setStringParam(COAXLINK_Remote_UserMode, systemString.c_str()); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("UserModeUpdate"); 
status = setIntegerParam(COAXLINK_Remote_UserModeUpdate, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AdvancedParameterSelector"); 
status = setIntegerParam(COAXLINK_Remote_AdvancedParameterSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AdvancedParameter"); 
status = setIntegerParam(COAXLINK_Remote_AdvancedParameter, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("AdvancedParameterSave"); 
status = setIntegerParam(COAXLINK_Remote_AdvancedParameterSave, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ConfigurationInfo"); 
status = setIntegerParam(COAXLINK_Remote_ConfigurationInfo, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("ConfigurationFactoryInfo"); 
status = setIntegerParam(COAXLINK_Remote_ConfigurationFactoryInfo, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterReadWriteMode"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterReadWriteMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterNonVolatileReadSelector"); 
status = setIntegerParam(COAXLINK_Remote_atileReadSelector, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterNonVolatileListSize"); 
status = setIntegerParam(COAXLINK_Remote_atileListSize, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterAddress"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterSize"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterSize, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterData"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterData, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterRead"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterRead, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterWrite"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterWrite, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("SensorRegisterRemove"); 
status = setIntegerParam(COAXLINK_Remote_SensorRegisterRemove, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FPGA_RegisterAddress"); 
status = setIntegerParam(COAXLINK_Remote_FPGA_RegisterAddress, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FPGA_RegisterSize"); 
status = setIntegerParam(COAXLINK_Remote_FPGA_RegisterSize, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FPGA_RegisterData"); 
status = setIntegerParam(COAXLINK_Remote_FPGA_RegisterData, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FPGA_RegisterRead"); 
status = setIntegerParam(COAXLINK_Remote_FPGA_RegisterRead, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("FPGA_RegisterWrite"); 
status = setIntegerParam(COAXLINK_Remote_FPGA_RegisterWrite, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemString = grabber.getString<Euresys::RemoteModule>("CustomerSpecialID"); 
status = setStringParam(COAXLINK_Remote_CustomerSpecialID, systemString.c_str()); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTEnable"); 
status = setIntegerParam(COAXLINK_Remote_LUTEnable, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTIndex"); 
status = setIntegerParam(COAXLINK_Remote_LUTIndex, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTValue"); 
status = setIntegerParam(COAXLINK_Remote_LUTValue, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTStart"); 
status = setIntegerParam(COAXLINK_Remote_LUTStart, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTEnd"); 
status = setIntegerParam(COAXLINK_Remote_LUTEnd, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("LUTStatus"); 
status = setIntegerParam(COAXLINK_Remote_LUTStatus, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("PayloadSize"); 
status = setIntegerParam(COAXLINK_Remote_PayloadSize, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelCorrectionEnable"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelCorrectionEnable, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelTestMode"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelTestMode, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelTotal"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelTotal, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelSelect"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelSelect, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelReadX"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelReadX, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelReadY"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelReadY, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelWriteX"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelWriteX, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelWriteY"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelWriteY, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelAdd"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelAdd, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelRemove"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelRemove, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelClearAll"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelClearAll, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelSave"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelSave, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelRestore"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelRestore, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelRestoreFactory"); 
status = setIntegerParam(COAXLINK_Remote_DefectPixelRestoreFactory, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DefectPixelSaveAsFactoryDefault"); 
status = setIntegerParam(COAXLINK_Remote_toryDefault, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_BlackClamp"); 
status = setIntegerParam(COAXLINK_Remote_DF_BlackClamp, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_ColumnOffsetCorrection"); 
status = setIntegerParam(COAXLINK_Remote_DF_ColumnOffsetCorrection, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_Calibrate"); 
status = setIntegerParam(COAXLINK_Remote_DF_Calibrate, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_Status"); 
status = setIntegerParam(COAXLINK_Remote_DF_Status, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_RestoreFactory"); 
status = setIntegerParam(COAXLINK_Remote_DF_RestoreFactory, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_SaveAsFactoryDefault"); 
status = setIntegerParam(COAXLINK_Remote_DF_SaveAsFactoryDefault, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("DF_IsUserCalibration"); 
status = setIntegerParam(COAXLINK_Remote_DF_IsUserCalibration, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_ColumnGainCorrection"); 
status = setIntegerParam(COAXLINK_Remote_BF_ColumnGainCorrection, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_AutoLevelAdjust"); 
status = setIntegerParam(COAXLINK_Remote_BF_AutoLevelAdjust, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_CalibrationVideoLevel"); 
status = setIntegerParam(COAXLINK_Remote_BF_CalibrationVideoLevel, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_OutputImagesDuringCalibration"); 
status = setIntegerParam(COAXLINK_Remote_gCalibration, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_Calibrate"); 
status = setIntegerParam(COAXLINK_Remote_BF_Calibrate, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_Status"); 
status = setIntegerParam(COAXLINK_Remote_BF_Status, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_RestoreFactory"); 
status = setIntegerParam(COAXLINK_Remote_BF_RestoreFactory, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_SaveAsFactoryDefault"); 
status = setIntegerParam(COAXLINK_Remote_BF_SaveAsFactoryDefault, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("BF_IsUserCalibration"); 
status = setIntegerParam(COAXLINK_Remote_BF_IsUserCalibration, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("CFG_FACTORY"); 
status = setIntegerParam(COAXLINK_Remote_CFG_FACTORY, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("CFG_COLOR"); 
status = setIntegerParam(COAXLINK_Remote_CFG_COLOR, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("CFG_MONO"); 
status = setIntegerParam(COAXLINK_Remote_CFG_MONO, systemInteger); 

} catch (const std::exception &e) { }  
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("UserSetSelector"); 
status = setIntegerParam(COAXLINK_Remote_UserSetSelector, systemInteger); 

} catch (const std::exception &e) { }  

// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("UserSetLoad"); 
status = setIntegerParam(COAXLINK_Remote_UserSetLoad, systemInteger); 

} catch (const std::exception &e) { }  
*/ 


// start of an execute (write Only) command 
/* 
try { 
systemInteger = grabber.getInteger<Euresys::RemoteModule>("UserSetSave"); 
status = setIntegerParam(COAXLINK_Remote_UserSetSave, systemInteger); 

} catch (const std::exception &e) { }  
*/ 

